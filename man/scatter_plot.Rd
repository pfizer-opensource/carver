% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/scatter_plot.R
\name{scatter_plot}
\alias{scatter_plot}
\title{Create Scatter Plot}
\usage{
scatter_plot(
  datain,
  axis_opts = plot_axis_opts(),
  series_var,
  series_labelvar,
  series_opts,
  legend_opts,
  plot_title = "",
  griddisplay = "N"
)
}
\arguments{
\item{datain}{\code{data.frame} retrieved from \code{process_vx_scatter_data()}.}

\item{axis_opts}{A \code{list} of axis specific options retrieved from \code{plot_axis_opts()}.}

\item{series_var}{Series (Treatment) Variable.}

\item{series_labelvar}{Series (Treatment) Variable labels for legend, if
different from \code{series_var}. If this is needed, then \code{series_labelvar}
should be a factor variable with levels corresponding to \code{series_var}, also a factor.}

\item{series_opts}{Series Variable styling options, a \code{list} containing
\code{shape}, \code{color} and \code{size}.}

\item{legend_opts}{Legend styling option, a \code{list} containing \code{label}, \code{pos}(position) and
\code{dir} (direction).}

\item{plot_title}{Text to use as plot title, if required}

\item{griddisplay}{Display Grid \code{(Y/N)}.}
}
\value{
A ggplot object
}
\description{
Create Scatter Plot
}
\examples{
library(dplyr)
library(purrr)

# Example 1

data("vx_scatter_data")

## process data for plotting
scatter_df <-
  process_vx_scatter_data(
    dataset_adsl = vx_scatter_data[["adsl"]],
    adsl_subset = 'EVALFL=="Y"',
    dataset_analysis = vx_scatter_data[["adva"]],
    analysis_subset = 'ANL01FL=="Y" & PARAMN==23 &
((AVISITN ==1 & EVALFL=="Y")|(AVISITN==2 & EVALFL=="Y" & EXCL5FL=="N")) & # nolint
 TRTA!="" & DTYPE=="LLOQIMP" & !is.na(AVAL)', # nolint
    split_by = "SEX",
    trtvar = "ACTARM",
    xvar = "AVISITN == 1",
    yvar = "AVISITN == 2",
    legendbign = "Y"
  )

## shape, color and symbols
series_opts <- plot_aes_opts(
  datain = scatter_df,
  series_color = "#F8766D~#619CFF",
  series_shape = "circle~triangle",
  series_size = as.numeric(str_to_vec("2~2"))
)

## splitting data to generate scatter plots of each subgroup (only if `split_by` is specified in
## `process_vx_scatter_data`)
data_list <- split_data_by_var(
  datain = scatter_df,
  split_by_prefix = "SUBGRPVAR"
)

## map over `scatter_plot` on split data
purrr::map(data_list, \(p) {
  scatter_plot(
    datain = p,
    axis_opts = plot_axis_opts(
      xlinearopts = list(
        breaks = c(0.001, 0.01, 0.1, 1, 10, 100),
        limits = c(0.001, 100)
      ),
      ylinearopts = list(
        breaks = c(0.001, 0.01, 0.1, 1, 10, 100, 1000),
        limits = c(0.001, 1000)
      ),
      xaxis_scale = "log10",
      yaxis_scale = "log10",
      xaxis_label = "Before Vaccination 1",
      yaxis_label = "1 Month after Vaccination 1"
    ),
    series_var = "TRTVAR",
    series_labelvar = "TRTVAR",
    series_opts = series_opts,
    legend_opts = list(
      label = "",
      pos = "bottom",
      dir = "horizontal"
    ),
    plot_title = paste("Number of Participants = ", length(unique(p$SUBJID))),
    griddisplay = "Y"
  )
})

# Example 2

iris |>
  ### this step is required for `scatter_plot()` to work as it requires `XVAR` and `YVAR` present
  ### in the data
  mutate(XVAR = Sepal.Length, YVAR = Sepal.Width) |>
  scatter_plot(
    axis_opts = plot_axis_opts(),
    series_var = "Species",
    series_labelvar = "Species",
    series_opts = list(
      shape = c(16, 17, 18),
      color = scales::hue_pal()(3),
      size = c(2, 2, 3)
    ),
    legend_opts = list(
      label = "Flower Species",
      pos = "bottom",
      dir = "horizontal"
    ),
    plot_title = "Generic Scatter plot with Iris data"
  )

}
